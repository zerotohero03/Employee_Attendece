i want a flask blue print for employee payroll management. (I'll paste the main.py for reference) 
1.Employee payroll should have following pages 
   a. Define Salary structure = where we we'd search employees by their id or name and their details such as employees other details apart form their id or name, employee document number, as well as their earning and deductions.
   b. generate Payslips = here what this page would is let you export payslips of all the employees in bulk or export one employee payslip of employee. such single employees payslip would come after search employees id.

#in context of export payslips of all employees.
following procedures should be followed.
1. download excel file (admin should be able to download excel file with predefined columns, where he'd paste all the employees details to for payslip generations)
2. upload that file (admin should be able to upload that file back in the system, after reading the uploaded data, export button colour should change to green indicating that payslips are ready to generated)
3. hit export button all the payslips would be generated in zip file, to avoid scattering.

note to remember 
1. I want separate database for this.
2. give me html with tailwind css 
3. use html as reference (which i'm pasting) to know what to include in database
4. give me first blue print and then htmls
5. don't give my existing flask, main.py

here is main.py and current html for your reference.

"from flask import Flask, render_template, request, redirect, url_for, flash, session, send_from_directory, abort
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import os
import urllib.parse
from datetime import datetime
from view_attendance_blueprint import view_attendance_blueprint

app = Flask(__name__)
app.secret_key = 'your_secret_key'
app.config['UPLOAD_FOLDER'] = os.path.join('static', 'uploads')
app.config['DATABASE'] = 'database/employees.db'

# Register the blueprint
app.register_blueprint(view_attendance_blueprint, url_prefix='/view_attendance')

# Ensure the upload folder exists
if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])

# Initialize database
def init_db():
    conn = None
    try:
        conn = sqlite3.connect(app.config['DATABASE'])
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS employees (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL UNIQUE,
                dob TEXT NOT NULL,
                gender TEXT NOT NULL,
                address TEXT NOT NULL,
                state TEXT NOT NULL,
                pincode TEXT NOT NULL,
                phone TEXT NOT NULL,
                alt_phone TEXT,
                email TEXT NOT NULL UNIQUE,
                pan TEXT,
                aadhar TEXT,
                employee_code TEXT NOT NULL UNIQUE,
                aadhar_path TEXT,
                pan_path TEXT,
                bank_passbook_path TEXT,
                profile_photo_path TEXT NOT NULL,
                bank_name TEXT NOT NULL,
                bank TEXT NOT NULL,
                account TEXT NOT NULL,
                ifsc TEXT NOT NULL,
                uan TEXT NOT NULL,
                experience TEXT NOT NULL,
                company_name TEXT,
                designation TEXT,
                function_performed TEXT,
                period_of_work TEXT,
                reason_for_leaving TEXT
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS attendance (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                employee_id INTEGER NOT NULL,
                date TEXT NOT NULL,
                time TEXT,
                status TEXT NOT NULL,
                reason_for_absence_halfday TEXT,
                FOREIGN KEY(employee_id) REFERENCES employees(id)
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS leave_requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                employee_id INTEGER NOT NULL,
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                reason TEXT NOT NULL,
                status TEXT DEFAULT 'Pending',
                FOREIGN KEY(employee_id) REFERENCES employees(id)
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS employee_login (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL UNIQUE,
                password TEXT NOT NULL
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS admin_login (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL UNIQUE,
                password TEXT NOT NULL
            )
        ''')
        conn.commit()
    except sqlite3.Error as e:
        print("SQLite error:", e)
    finally:
        if conn:
            conn.close()

# Ensure file paths are stored with forward slashes relative to the "static/uploads" directory
def save_file(file, employee_folder):
    filename = secure_filename(file.filename)
    file_path = os.path.join(employee_folder, filename)
    file.save(file_path)
    # Return the file path relative to the "static/uploads" directory
    return os.path.relpath(file_path, app.config['UPLOAD_FOLDER']).replace("\\", "/")

@app.route('/')
def index():
    if 'username' not in session or session['role'] != 'admin':
        return redirect(url_for('login'))
    
    # Fetch the first employee from the database
    conn = sqlite3.connect(app.config['DATABASE'])
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM employees LIMIT 1')
    employee_data = cursor.fetchone()  # Fetches a tuple representing the first row
    
    # Convert the fetched data into a dictionary
    employee = {
        'id': employee_data[0],
        'name': employee_data[1],
        'dob': employee_data[2],
        # Add other fields as needed
    }
    
    conn.close()

    # Pass the employee data to the template context
    return render_template('index.html', employee=employee)

# Update the employee_dashboard Route to Include the Current Employee's Data:
# Modify the employee_dashboard route to pass the current employee's data to the template.

@app.route('/employee_dashboard')
def employee_dashboard():
    if 'username' not in session or session['role'] != 'employee':
        return redirect(url_for('login'))

    name = session['username']  # Assuming the employee's name is stored in the session as 'username'

    conn = None
    employee = None
    try:
        conn = sqlite3.connect(app.config['DATABASE'])
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM employees WHERE name = ?', (name,))
        employee = cursor.fetchone()
    except sqlite3.Error as e:
        print("SQLite error:", e)
        flash('An error occurred while retrieving employee data!', 'error')
    finally:
        if conn:
            conn.close()

    if not employee:
        flash('Employee details not found. Please check your credentials or contact the administrator.', 'error')
        return redirect(url_for('logout'))

    # Convert employee data to a dictionary
    employee_dict = {
        'id': employee[0],
        'name': employee[1],
        'dob': employee[2],
        'gender': employee[3],
        'address': employee[4],
        'state': employee[5],
        'pincode': employee[6],
        'phone': employee[7],
        'alt_phone': employee[8],
        'email': employee[9],
        'pan': employee[10],
        'aadhar': employee[11],
        'employee_code': employee[12],
        'aadhar_path': employee[13],
        'pan_path': employee[14],
        'bank_passbook_path': employee[15],
        'profile_photo_path': employee[16],
        'bank_name': employee[17],
        'bank': employee[18],
        'account': employee[19],
        'ifsc': employee[20],
        'uan': employee[21],
        'experience': employee[22],
        'company_name': employee[23],
        'designation': employee[24],
        'function_performed': employee[25],
        'period_of_work': employee[26],
        'reason_for_leaving': employee[27]
    }

    flash('Welcome, {}!'.format(name), 'success')
    return render_template('employee_dashboard.html', employee=employee_dict)

@app.route('/update_profile', methods=['POST'])
def update_profile():
    if 'username' not in session or session['role'] != 'employee':
        return redirect(url_for('login'))

    name = session['username']  # Assuming the employee's name is stored in the session as 'username'

    full_name = request.form['full_name']
    email = request.form['email']
    phone = request.form['phone']
    profile_picture = request.files.get('profile_picture')

    conn = None
    try:
        conn = sqlite3.connect(app.config['DATABASE'])
        cursor = conn.cursor()

        # Fetch the employee's ID using the username from session
        cursor.execute('SELECT id, profile_photo_path FROM employees WHERE name = ?', (name,))
        employee = cursor.fetchone()
        if not employee:
            flash('Employee not found!', 'error')
            return redirect(url_for('employee_dashboard'))

        employee_id = employee[0]
        current_profile_photo_path = employee[1]

        # Create a directory for the employee if not exists
        employee_folder = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(full_name))
        if not os.path.exists(employee_folder):
            os.makedirs(employee_folder)

        # Save the new profile picture if uploaded
        profile_photo_path = current_profile_photo_path
        if profile_picture:
            profile_photo_path = save_file(profile_picture, employee_folder)
            profile_photo_path = profile_photo_path.replace("static/uploads/", "")

        # Update the employee's information in the database
        cursor.execute('''
            UPDATE employees
            SET name = ?, email = ?, phone = ?, profile_photo_path = ?
            WHERE id = ?
        ''', (full_name, email, phone, profile_photo_path, employee_id))

        conn.commit()
        flash('Profile updated successfully!')
    except sqlite3.Error as e:
        print("SQLite error:", e)
        flash('An error occurred while updating the profile!', 'error')
    finally:
        if conn:
            conn.close()

    return redirect(url_for('employee_dashboard'))

@app.route('/add_employee', methods=['GET', 'POST'])
def add_employee():
    if request.method == 'POST':
        name = request.form['name']
        dob = request.form['dob']
        gender = request.form['gender']
        address = request.form['address']
        state = request.form['state']
        pincode = request.form['pincode']
        phone = request.form['phone']
        alt_phone = request.form.get('alt_phone')
        email = request.form['email']
        pan = request.form.get('pan')
        aadhar = request.form.get('aadhar')
        employee_code = request.form['employee_code']

        # Create a directory for the employee
        employee_folder = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(name))
        if not os.path.exists(employee_folder):
            os.makedirs(employee_folder)

        # Handle file uploads
        aadhar_path = None
        pan_path = None
        bank_passbook_path = None
        profile_photo_path = None
        for file_key in request.files:
            file = request.files[file_key]
            if file:
                file_path = save_file(file, employee_folder)
                if file_key == 'aadhar_upload':
                    aadhar_path = file_path
                elif file_key == 'pan_upload':
                    pan_path = file_path
                elif file_key == 'bank_passbook_upload':
                    bank_passbook_path = file_path
                elif file_key == 'profile_photo_upload':
                    profile_photo_path = file_path

        bank_name = request.form['bank_name']
        bank = request.form['bank']
        account = request.form['account']
        ifsc = request.form['ifsc']
        uan = request.form['uan']
        experience = request.form['experience']
        company_name = request.form.get('company_name')
        designation = request.form.get('designation')
        function_performed = request.form.get('function')
        period_of_work = request.form.get('period')
        reason_for_leaving = request.form.get('reason')

        conn = None
        try:
            conn = sqlite3.connect(app.config['DATABASE'])
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO employees (
                    name, dob, gender, address, state, pincode, phone, alt_phone, email, pan, aadhar, 
                    employee_code, aadhar_path, pan_path, bank_passbook_path, profile_photo_path,
                    bank_name, bank, account, ifsc, uan, experience, company_name, designation, 
                    function_performed, period_of_work, reason_for_leaving
                )
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                name, dob, gender, address, state, pincode, phone, alt_phone, email, pan, aadhar, 
                employee_code, aadhar_path, pan_path, bank_passbook_path, profile_photo_path,
                bank_name, bank, account, ifsc, uan, experience, company_name, designation, 
                function_performed, period_of_work, reason_for_leaving
            ))
            conn.commit()
            flash('Employee added successfully!')
        except sqlite3.IntegrityError as e:
            print("SQLite Integrity error:", e)
            flash('An employee with this name or employee code already exists!', 'error')
        except sqlite3.Error as e:
            print("SQLite error:", e)
            flash('An error occurred while adding employee!', 'error')
        finally:
            if conn:
                conn.close()

        return redirect(url_for('index'))

    return render_template('add_employee.html')

@app.route('/uploads/<employee_name>/<path:filename>')
def uploaded_file(employee_name, filename):
    # Decode the filename to handle special characters
    decoded_filename = urllib.parse.unquote(filename)
    # Replace backslashes with forward slashes in the filename
    decoded_filename = decoded_filename.replace("\\", "/")
    # Construct the file path based on employee name and decoded filename
    file_path = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(employee_name), decoded_filename)
    # Check if the file exists
    if os.path.exists(file_path):
        # If the file exists, send it
        return send_from_directory(os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(employee_name)), os.path.basename(decoded_filename))
    else:
        # If the file does not exist, return a 404 error
        abort(404)

@app.route('/view_employee')
def view_employee():
    conn = None
    try:
        conn = sqlite3.connect(app.config['DATABASE'])
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM employees')
        employees = cursor.fetchall()
    except sqlite3.Error as e:
        print("SQLite error:", e)
        flash('An error occurred while retrieving employees!', 'error')
        employees = []
    finally:
        if conn:
            conn.close()

    return render_template('view_employee.html', employees=employees)

@app.route('/edit_employee', methods=['GET', 'POST'])
@app.route('/edit_employee/<int:employee_id>', methods=['GET', 'POST'])
def edit_employee(employee_id=None):
    conn = None
    employees = None
    employee = None
    try:
        conn = sqlite3.connect(app.config['DATABASE'])
        cursor = conn.cursor()
        cursor.execute('SELECT id, name FROM employees')
        employees = cursor.fetchall()  # Fetch all employees (id and name only)
        if employee_id:
            cursor.execute('SELECT * FROM employees WHERE id = ?', (employee_id,))
            employee = cursor.fetchone()
    except sqlite3.Error as e:
        print("SQLite error:", e)
        flash('An error occurred while retrieving employee data!', 'error')
    finally:
        if conn:
            conn.close()

    if employee_id and not employee:
        flash('Employee not found!', 'error')
        return redirect(url_for('edit_employee'))

    if request.method == 'POST' and employee:
        name = request.form['name']
        dob = request.form['dob']
        gender = request.form['gender']
        address = request.form['address']
        state = request.form['state']
        pincode = request.form['pincode']
        phone = request.form['phone']
        alt_phone = request.form['alt_phone']
        email = request.form['email']
        pan = request.form['pan']
        aadhar = request.form['aadhar']
        employee_code = request.form['employee_code']
        aadhar_file = request.files.get('aadhar_file')
        pan_file = request.files.get('pan_file')
        bank_passbook_file = request.files.get('bank_passbook_file')
        profile_photo_file = request.files.get('profile_photo_file')
        bank_name = request.form['bank_name']
        bank = request.form['bank']
        account = request.form['account']
        ifsc = request.form['ifsc']
        uan = request.form['uan']
        experience = request.form['experience']
        company_name = request.form['company_name']
        designation = request.form['designation']
        function_performed = request.form['function_performed']
        period_of_work = request.form['period_of_work']
        reason_for_leaving = request.form['reason_for_leaving']

        employee_folder = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(name))
        if not os.path.exists(employee_folder):
            os.makedirs(employee_folder)

        # Save new files if they are uploaded
        aadhar_path = employee[13]
        if aadhar_file:
            aadhar_path = save_file(aadhar_file, employee_folder)

        pan_path = employee[14]
        if pan_file:
            pan_path = save_file(pan_file, employee_folder)

        bank_passbook_path = employee[15]
        if bank_passbook_file:
            bank_passbook_path = save_file(bank_passbook_file, employee_folder)

        profile_photo_path = employee[16]
        if profile_photo_file:
            profile_photo_path = save_file(profile_photo_file, employee_folder)

        conn = None
        try:
            conn = sqlite3.connect(app.config['DATABASE'])
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE employees
                SET name = ?, dob = ?, gender = ?, address = ?, state = ?, pincode = ?, phone = ?, alt_phone = ?, email = ?, pan = ?, aadhar = ?, employee_code = ?, aadhar_path = ?, pan_path = ?, bank_passbook_path = ?, profile_photo_path = ?, bank_name = ?, bank = ?, account = ?, ifsc = ?, uan = ?, experience = ?, company_name = ?, designation = ?, function_performed = ?, period_of_work = ?, reason_for_leaving = ?
                WHERE id = ?
            ''', (
                name, dob, gender, address, state, pincode, phone, alt_phone, email, pan, aadhar, 
                employee_code, aadhar_path, pan_path, bank_passbook_path, profile_photo_path, 
                bank_name, bank, account, ifsc, uan, experience, company_name, designation, 
                function_performed, period_of_work, reason_for_leaving, employee_id
            ))
            conn.commit()
            flash('Employee updated successfully!')
        except sqlite3.Error as e:
            print("SQLite error:", e)
            flash('An error occurred while updating the employee!', 'error')
        finally:
            if conn:
                conn.close()

        return redirect(url_for('edit_employee', employee_id=employee_id))

    # Convert employee data to a dictionary
    employee_dict = None
    if employee:
        employee_dict = {
            'id': employee[0],
            'name': employee[1],
            'dob': employee[2],
            'gender': employee[3],
            'address': employee[4],
            'state': employee[5],
            'pincode': employee[6],
            'phone': employee[7],
            'alt_phone': employee[8],
            'email': employee[9],
            'pan': employee[10],
            'aadhar': employee[11],
            'employee_code': employee[12],
            'aadhar_path': employee[13],
            'pan_path': employee[14],
            'bank_passbook_path': employee[15],
            'profile_photo_path': employee[16],
            'bank_name': employee[17],
            'bank': employee[18],
            'account': employee[19],
            'ifsc': employee[20],
            'uan': employee[21],
            'experience': employee[22],
            'company_name': employee[23],
            'designation': employee[24],
            'function_performed': employee[25],
            'period_of_work': employee[26],
            'reason_for_leaving': employee[27]
        }

    return render_template('edit_employee.html', employee=employee_dict, employees=employees, employee_id=employee_id)

@app.route('/employees')
def list_employees():
    conn = sqlite3.connect(app.config['DATABASE'])
    cursor = conn.cursor()
    cursor.execute('SELECT id, name FROM employees')
    employees = cursor.fetchall()
    conn.close()
    return render_template('employees.html', employees=employees)

@app.route('/mark_attendance', methods=['GET', 'POST'])
def mark_attendance():
    conn = None
    try:
        if request.method == 'POST':
            employee_id = request.form['employee_id']
            date = request.form['date']
            status = request.form['status']

            # Get the current time
            current_time = datetime.now().strftime('%H:%M:%S')

            # Get the reason for absence (if half-day, specify AM/PM)
            reason_for_absence_halfday = request.form.get('reason_for_absence_halfday')

            conn = sqlite3.connect(app.config['DATABASE'])
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO attendance (employee_id, date, time, status, reason_for_absence_halfday)
                VALUES (?, ?, ?, ?, ?)
            ''', (employee_id, date, current_time, status, reason_for_absence_halfday))
            conn.commit()
            flash('Attendance marked successfully!')

            return redirect(url_for('index'))

        conn = sqlite3.connect(app.config['DATABASE'])
        cursor = conn.cursor()
        # Retrieve a list of all employees from the employees table, or an empty list if there are no employees
        cursor.execute('SELECT id, name FROM employees')
        employees = cursor.fetchall() or []
    except sqlite3.Error as e:
        print("SQLite error:", e)
        flash('An error occurred while processing the request!', 'error')
        employees = []
    finally:
        if conn:
            conn.close()

    return render_template('mark_attendance.html', employees=employees)

@app.route('/leave_request', methods=['GET', 'POST'])
def leave_request():
    conn = None
    try:
        if request.method == 'POST':
            employee_id = request.form['employee_id']
            start_date = request.form['start_date']
            end_date = request.form['end_date']
            reason = request.form['reason']

            conn = sqlite3.connect(app.config['DATABASE'])
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO leave_requests (employee_id, start_date, end_date, reason)
                VALUES (?, ?, ?, ?)
            ''', (employee_id, start_date, end_date, reason))
            conn.commit()
            flash('Leave request submitted successfully!')

            return redirect(url_for('index'))

        conn = sqlite3.connect(app.config['DATABASE'])
        cursor = conn.cursor()
        cursor.execute('SELECT id, name FROM employees')
        employees = cursor.fetchall()
    except sqlite3.Error as e:
        print("SQLite error:", e)
        flash('An error occurred while processing the request!', 'error')
        employees = []
    finally:
        if conn:
            conn.close()

    return render_template('leave_request.html', employees=employees)

@app.route('/register_admin', methods=['GET', 'POST'])
def register_admin():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = generate_password_hash(password)
        try:
            add_admin(username, hashed_password)
            flash('Admin registered successfully!')
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            flash('Username already exists!')
    return render_template('register_admin.html')

@app.route('/register_employee', methods=['GET', 'POST'])
def register_employee():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = generate_password_hash(password)
        try:
            add_employee_login(username, hashed_password)
            flash('Employee registered successfully!')
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            flash('Username already exists!')
    return render_template('register_employee.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        role = request.form['role']
        
        conn = sqlite3.connect(app.config['DATABASE'])
        cursor = conn.cursor()
        
        if role == 'employee':
            cursor.execute('SELECT * FROM employee_login WHERE username = ?', (username,))
        elif role == 'admin':
            cursor.execute('SELECT * FROM admin_login WHERE username = ?', (username,))
        user = cursor.fetchone()
        conn.close()
        
        if user and check_password_hash(user[2], password):
            session['username'] = username
            session['role'] = role
            if role == 'admin':
                return redirect(url_for('index'))
            elif role == 'employee':
                return redirect(url_for('employee_dashboard'))
        else:
            flash('Invalid username or password', 'error')
    
    return render_template('user_authentication.html')

@app.route('/static/css/images/<path:path>')
def send_static_images(path):
    return send_from_directory('static/css/images', path)

@app.route('/logout')
def logout():
    session.pop('username', None)
    session.pop('role', None)
    flash('You have been logged out.')
    return redirect(url_for('login'))

# Helper functions to add admins and employees
def add_admin(username, password):
    conn = sqlite3.connect(app.config['DATABASE'])
    cursor = conn.cursor()
    cursor.execute('INSERT INTO admin_login (username, password) VALUES (?, ?)', (username, password))
    conn.commit()
    conn.close()

def add_employee_login(username, password):
    conn = sqlite3.connect(app.config['DATABASE'])
    cursor = conn.cursor()
    cursor.execute('INSERT INTO employee_login (username, password) VALUES (?, ?)', (username, password))
    conn.commit()
    conn.close()

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
"

"<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Payslip</title>
  <link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Payslip</h1>
    <button class="px-4 py-2 bg-blue-500 text-white rounded shadow-md float-right mb-4" onclick="window.print()">Print</button>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div class="bg-gray-100 p-4 rounded-lg shadow-md">
        <h3 class="text-lg font-medium mb-2">Employee Details</h3>
        <ul class="list-disc ml-4">
          <li>Name: <span class="font-bold">John Doe</span></li>
          <li>Designation: <span class="font-bold">Software Engineer</span></li>
          <li>Department: <span class="font-bold">Engineering</span></li>
          <li>D.O.J: <span class="font-bold">2023-01-01</span></li>
          <li>D.O.B: <span class="font-bold">1990-10-26</span></li>
          <li>Gender: <span class="font-bold">Male</span></li>
          <li>Location: <span class="font-bold">Delhi, India</span></li>
          <li>State: <span class="font-bold">Delhi</span></li>
          <li>Contact: <span class="font-bold">+91 1234567890</span></li>
          <li>E-Mail: <span class="font-bold">john.doe@example.com</span></li>
        </ul>
      </div>
      <div class="bg-gray-100 p-4 rounded-lg shadow-md">
        <h3 class="text-lg font-medium mb-2">Employee Document Numbers</h3>
        <ul class="list-disc ml-4">
          <li>PAN: <span class="font-bold">XXXX-XXXX-XXXX</span></li>
          <li>AADHAR: <span class="font-bold">XXXXXXXXXXXX</span></li>
          <li>Name as per Bank: <span class="font-bold">John Doe</span></li>
          <li>BANK NAME: <span class="font-bold">Example Bank</span></li>
          <li>Bank Account: <span class="font-bold">XXX23623XX</span></li>
          <li>IFSC: <span class="font-bold">XXXXYYYYZZZZ</span></li>
          <li>UAN Number: <span class="font-bold">XXXXXXXXXXXX</span></li>
        </ul>
      </div>
    </div>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-8">
      <div class="bg-gray-100 p-4 rounded-lg shadow-md">
        <h3 class="text-lg font-medium mb-2">Earnings</h3>
        <ul class="list-disc ml-4">
          <li>Basic Salary: <span class="font-bold">₹ 50,000</span></li>
          <li>House Rent Allowance (HRA): <span class="font-bold">₹ 10,000</span></li>
          <li>Special Allowance: <span class="font-bold">₹ 5,000</span></li>
          <li>LTA: <span class="font-bold">₹ 3,000</span></li>
          <li>Retention Bonus: <span class="font-bold">₹ 2,000 (if applicable)</span></li>
          <li>Mobile & Internet Allowance: <span class="font-bold">₹ 1,000</span></li>
          <li>Professional Development Allowance: <span class="font-bold">₹ 2,000</span></li>
          <li>Office Attire Allowance: <span class="font-bold">₹ 1,000 (if applicable)</span></li>
          <li>Other Allowance: <span class="font-bold">₹ - (specify allowance name and amount)</span></li>
          <li>Additional Payments: <span class="font-bold">₹ - (specify payment name and amount)</span></li>
          <li>Additional Payment / Bonus: <span class="font-bold">₹ - (specify bonus name and amount)</span></li>
        </ul>
        <h4 class="text-lg font-medium mt-4">Gross Earnings: <span class="font-bold">₹ 64,000</span></h4>
      </div>
      <div class="bg-gray-100 p-4 rounded-lg shadow-md">
        <h3 class="text-lg font-medium mb-2">Deductions</h3>
        <ul class="list-disc ml-4">
          <li>PF: <span class="font-bold">₹ 2,000</span></li>
          <li>VPF: <span class="font-bold">₹ 0 (Voluntary Provident Fund)</span></li>
          <li>LWF: <span class="font-bold">₹ 1,000 (Leave Without Pay)</span></li>
          <li>PT: <span class="font-bold">₹ 500 (Professional Tax)</span></li>
          <li>LWF Arrears deduction: <span class="font-bold">₹ - (specify amount if applicable)</span></li>
          <li>Other Deductions: <span class="font-bold">₹ - (specify deduction name and amount)</span></li>
          <li>TDS: <span class="font-bold">₹ 5,000</span></li>
        </ul>
        <h4 class="text-lg font-medium mt-4">Gross Deductions: <span class="font-bold">₹ 8,500</span></h4>
      </div>
    </div>
    <div class="bg-gray-100 p-4 mt-8 rounded-lg shadow-md">
      <h3 class="text-lg font-medium mb-2">Net Pay</h3>
      <ul class="list-none">
        <li class="flex justify-between items-center">
          <span>Gross Earnings</span>
          <span class="font-bold">₹ 64,000</span>
        </li>
        <li class="flex justify-between items-center mt-2">
          <span>Gross Deductions</span>
          <span class="font-bold">- ₹ 8,500</span>
        </li>
        <li class="flex justify-between items-center mt-4 text-green-500 font-bold">
          <span>Net Pay</span>
          <span>₹ 55,500</span>
        </li>
        <li class="flex justify-between items-center mt-2">
          <span>Net Pay (In Words):</span>
          <span class="font-bold">Fifty Five Thousand Five Hundred Rupees Only</span>
        </li>
      </ul>
      <p class="text-sm text-gray-500 mt-4">This is a computer-generated salary slip. Does not require a Signature.</p>
    </div>
  </div>
</body>
</html>

"


please help me 